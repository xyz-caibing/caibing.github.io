<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>买了个菜饼</title>
  <icon>https://www.gravatar.com/avatar/f0a7280f0ab61c9b5701ac3a6fcb0ab9</icon>
  <subtitle>坚持养成习惯</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="//caibing.github.io/"/>
  <updated>2020-09-28T08:00:41.674Z</updated>
  <id>//caibing.github.io/</id>
  
  <author>
    <name>菜饼</name>
    <email>xyz-caibing@gmail.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>大姐小孩要上网课，请我帮组装一台PC</title>
    <link href="//caibing.github.io/2020/09/27/My-PC-2020/"/>
    <id>//caibing.github.io/2020/09/27/My-PC-2020/</id>
    <published>2020-09-27T13:26:00.000Z</published>
    <updated>2020-09-28T08:00:41.674Z</updated>
    
    <content type="html"><![CDATA[<p>利用周末休假时间，在B站看了某位博主的组装视频，然后开始上某宝购各种组件（详细组件配置在下方）</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">CPU   Intel i5-10400F 6核 4.3GHz</span><br><span class="line">扇热器  风冷  + 小风扇*4</span><br><span class="line">显卡   独显芯片 GTX1650 4G</span><br><span class="line">主板   华硕B460M-N </span><br><span class="line">内存   芝奇 8G DDR4 3200 * 2</span><br><span class="line">固态硬盘   三星PM981 512G M.2  </span><br><span class="line">电源   300W</span><br><span class="line">机箱   中塔</span><br><span class="line">显示器  AOV 2K 23.8寸 75Hz</span><br><span class="line">键盘</span><br><span class="line">鼠标+鼠标垫</span><br><span class="line">无线网卡 </span><br><span class="line">电脑音响 </span><br><span class="line"></span><br><span class="line">win10系统正版</span><br><span class="line"></span><br><span class="line">总价：3361 + 1100（显示器+无线网卡+扬声器）</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;利用周末休假时间，在B站看了某位博主的组装视频，然后开始上某宝购各种组件（详细组件配置在下方）&lt;/p&gt;
&lt;figure class=&quot;highlight markdown&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;li
      
    
    </summary>
    
    
      <category term="PC" scheme="//caibing.github.io/tags/PC/"/>
    
  </entry>
  
  <entry>
    <title>Docker 命令集</title>
    <link href="//caibing.github.io/2020/09/18/docker-command/"/>
    <id>//caibing.github.io/2020/09/18/docker-command/</id>
    <published>2020-09-18T08:23:00.000Z</published>
    <updated>2020-09-28T07:50:01.667Z</updated>
    
    <content type="html"><![CDATA[<h3 id="获取镜像"><a href="#获取镜像" class="headerlink" title="获取镜像"></a>获取镜像</h3><ul><li>从Docker镜像仓库获取镜像的命令是docker pull。其命令格式为：<figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">docker pull [选项] [Docker Registry 地址[:端口号]/]仓库名[:标签]</span><br></pre></td></tr></table></figure></li></ul><blockquote><p>注意：这里的仓库名是两段式名称，即&lt;用户名&gt;/&lt;软件名&gt;。对于Docker Hub，如果不给出用户名，则默认为library，也就是官方镜像。</p></blockquote><h3 id="列出镜像"><a href="#列出镜像" class="headerlink" title="列出镜像"></a>列出镜像</h3><ul><li><p>可以通过 docker images [ls] 列出已经下载的所有顶层镜像。其命令格式为：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">docker images [选项] [仓库名[:标签]]</span><br><span class="line"></span><br><span class="line">选项：</span><br><span class="line"><span class="code">    -a, --all           希望显示包括中间层镜像在内的所有镜像的话，需要加 -a 参数。</span></span><br><span class="line"><span class="code">        --digests       摘要</span></span><br><span class="line"><span class="code">    -f, --filter value  根据提供的条件过滤输出</span></span><br><span class="line"><span class="bullet">                        - </span>dangling =(true|false)     显示*[虚悬镜像]:详细解释在下方</span><br><span class="line"><span class="bullet">                        - </span>label =&lt;key&gt; or label=&lt;key&gt;=&lt;value&gt;    如果镜像构建时，定义了label，可以通过label来过滤</span><br><span class="line"><span class="bullet">                        - </span>before =(&lt;image-name&gt;[:tag]|&lt;image-id&gt;|&lt;image@digest&gt;)     希望看到某个镜像之后建立的镜像</span><br><span class="line"><span class="bullet">                        - </span>since =(&lt;image-name&gt;[:tag]|&lt;image-id&gt;|&lt;image@digest&gt;)      希望查看某个位置之前的镜像</span><br><span class="line"><span class="code">        --format string 以特定格式显示</span></span><br><span class="line"><span class="code">        --help</span></span><br><span class="line"><span class="code">        --no-trunc      不要截断输出</span></span><br><span class="line"><span class="code">    -q, --quiet         仅显示IMAGE ID，‘注意可以和-f搭配组合以完成很强大的功能，看到过滤器后，可以多注意一下它们的用法’</span></span><br></pre></td></tr></table></figure></li><li><p>镜像体积：显示的是镜像下载到本地后，展开后的各层所占空间的总和。需注意镜像体积总和并非是所有镜像实际硬盘消耗，因为docker镜像是多层存储结构，并可以继承、复用相同的基础镜像。可以用下面的命令</p><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker images ls <span class="comment">[仓库名<span class="comment">[:标签]</span>]</span></span><br></pre></td></tr></table></figure></li><li><p>虚悬镜像（dangling image）：镜像原本是有镜像名和标签的，如ubuntu:16.04，随着官方镜像维护，发布新版本后，重新docker pull ubuntu:16.04时，这个镜像名被转移到了新下载的镜像身上，而旧的镜像上这个名称则被取消，从而成为了<none>.这类无标签镜像也被称为 虚悬镜像。可以用下面的命令</none></p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker images <span class="keyword">ls</span> -f dangling=<span class="literal">true</span></span><br></pre></td></tr></table></figure></li><li><p>一般来说虚悬镜像已经失去存在必要，可以删除，可以用下面的命令</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">docker images prune</span></span><br></pre></td></tr></table></figure></li><li><p>中间层镜像：为了加速镜像构建、重复利用资源，docker会利用中间层镜像。所以在使用一段时间后，可能会看到一些依赖的中间层镜像。可以用下面的命令</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">docker images ls -a</span></span><br></pre></td></tr></table></figure></li><li><p>列出部分镜像</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">docker images <span class="keyword">ls</span> [仓库名[:标签]]</span><br><span class="line"></span><br><span class="line">docker images <span class="keyword">ls</span> -f since=仓库名:标签</span><br><span class="line"></span><br><span class="line">docker images <span class="keyword">ls</span> -f label=com.example.<span class="keyword">version</span>=0.1.<span class="string">..</span></span><br></pre></td></tr></table></figure></li><li><p>以特定格式显示，我们可能只是对表格的结构不满意，希望自己组织列；或者不希望有标题，这样方便其它程序解析结果等，这就用到了 Go 的模板语法。</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker images <span class="keyword">ls</span> <span class="params">--format</span> <span class="string">"&#123;&#123;.ID&#125;&#125;: &#123;&#123;.Repository&#125;&#125;"</span></span><br><span class="line"></span><br><span class="line">docker images <span class="keyword">ls</span> <span class="params">--format</span> <span class="string">"table &#123;&#123;.ID&#125;&#125;\t&#123;&#123;.Repository&#125;&#125;\t&#123;&#123;.Tag&#125;&#125;"</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="删除本地镜像"><a href="#删除本地镜像" class="headerlink" title="删除本地镜像"></a>删除本地镜像</h3><ul><li>如果要删除本地镜像，可以使用docker images rm 命令，其格式为：<figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker images rm [选项] <span class="xml"><span class="tag">&lt;<span class="name">镜像1</span>&gt;</span></span> [<span class="xml"><span class="tag">&lt;<span class="name">镜像2</span>&gt;</span></span> ...]</span><br></pre></td></tr></table></figure></li></ul><blockquote><p>注意：其中，&lt;镜像&gt; 可以是 镜像短ID、镜像长ID、镜像名 或者 镜像摘要。镜像的唯一标识是镜像ID和镜像摘要</p><ul><li>用 docker images ls 命令来配合 docker image ls -q ，比如我们需要删除所有仓库名为redis的镜像 或 删除所有在mongo:3.2之前的镜像：<figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker images rm $(docker images <span class="keyword">ls</span> -q redis)</span><br><span class="line"></span><br><span class="line">docker images rm $(docker iamges <span class="keyword">ls</span> -q -f before=mongo:<span class="number">3.2</span>)</span><br></pre></td></tr></table></figure></li></ul></blockquote><blockquote><p>充分利用你的想象力和 Linux 命令行的强大，你可以完成很多非常赞的功能。</p></blockquote><h3 id="容器操作"><a href="#容器操作" class="headerlink" title="容器操作"></a>容器操作</h3><p>… 敬请期待 …</p><h3 id="理解镜像的构成"><a href="#理解镜像的构成" class="headerlink" title="理解镜像的构成"></a>理解镜像的构成</h3><p>… 敬请期待 …</p><h3 id="使用Dockerfile定制镜像"><a href="#使用Dockerfile定制镜像" class="headerlink" title="使用Dockerfile定制镜像"></a>使用Dockerfile定制镜像</h3><h3 id="镜像构建工作原理"><a href="#镜像构建工作原理" class="headerlink" title="镜像构建工作原理"></a>镜像构建工作原理</h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;获取镜像&quot;&gt;&lt;a href=&quot;#获取镜像&quot; class=&quot;headerlink&quot; title=&quot;获取镜像&quot;&gt;&lt;/a&gt;获取镜像&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;从Docker镜像仓库获取镜像的命令是docker pull。其命令格式为：&lt;figure class=&quot;hig
      
    
    </summary>
    
    
      <category term="docker" scheme="//caibing.github.io/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>lt takes a village</title>
    <link href="//caibing.github.io/2020/09/12/village-2020/"/>
    <id>//caibing.github.io/2020/09/12/village-2020/</id>
    <published>2020-09-12T00:51:00.000Z</published>
    <updated>2020-09-12T00:52:41.092Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>在今天的公司文化里，非常强调团队协作，我们要面对的工作非常复杂，几乎没有什么人能完全独当一面。同样，回到家里，养孩子也是个复杂的系统工程，聪明的女性，要学会建立一个强有力的支持系统。通常，妈妈们，不管是职场妈妈还是全职妈妈，会理所当然的认为，教育孩子的主要的职责是自己的。但即使你觉得自己负主要职责，妈妈不是，也不应该是唯一的负责人。<br>就像在公司里，想要做成事，一定要一个团队来一起做一样。我们在家里教育孩子，也需要利用一个团队。</p><h6 id="谁会是你的队友？"><a href="#谁会是你的队友？" class="headerlink" title="谁会是你的队友？"></a>谁会是你的队友？</h6><ul><li>一类是孩子的爸爸和亲戚、长辈；</li><li>第二类是友邻和朋友</li></ul><p>待续…</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;在今天的公司文化里，非常强调团队协作，我们要面对的工作非常复杂，几乎没有什么人能完全独当一面。同样，回到家里，养孩子也是个复杂的系统工程，聪
      
    
    </summary>
    
    
      <category term="培养面向未来的孩子" scheme="//caibing.github.io/tags/%E5%9F%B9%E5%85%BB%E9%9D%A2%E5%90%91%E6%9C%AA%E6%9D%A5%E7%9A%84%E5%AD%A9%E5%AD%90/"/>
    
  </entry>
  
  <entry>
    <title>面向对象的设计 总结</title>
    <link href="//caibing.github.io/2020/09/11/oop-summary-2020/"/>
    <id>//caibing.github.io/2020/09/11/oop-summary-2020/</id>
    <published>2020-09-11T08:42:00.000Z</published>
    <updated>2020-09-11T08:55:39.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>代码建模就是把业务抽象成事务（类、抽象类）和行为（接口）的过程。</p></blockquote><blockquote><p>面向对象的设计原则</p></blockquote><blockquote><p>对接口编程，不要对实现编程</p></blockquote><blockquote><p>使用对象之间的组合，减少对继承的使用</p></blockquote><blockquote><p>抽象用于不同的事务，而接口用于事物的行为</p></blockquote><blockquote><p>结论：代码建模过程就是“面向对象设计过程”的具体实现方式</p></blockquote><h6 id="设计模式的设计原则"><a href="#设计模式的设计原则" class="headerlink" title="设计模式的设计原则"></a>设计模式的设计原则</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">开闭原则：对扩展开放，对修改关闭</span><br><span class="line">依赖倒置：对接口编程，依赖于抽象而不依赖于具体</span><br><span class="line">接口隔离：使用多个接口，而不是对一个接口编程，去依赖降低耦合</span><br><span class="line">最少知道：减少内部依赖，尽可能的独立</span><br><span class="line">合成复用：多个独立的实体合成聚合，而不是使用继承</span><br><span class="line">里氏代换：超类出现的地方，派生类都可以出现</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;代码建模就是把业务抽象成事务（类、抽象类）和行为（接口）的过程。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;面向对象的设计原则&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;对接口编程，不要对实现编程
      
    
    </summary>
    
    
      <category term="面向对象总结" scheme="//caibing.github.io/tags/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E6%80%BB%E7%BB%93/"/>
    
      <category term="summary" scheme="//caibing.github.io/tags/summary/"/>
    
  </entry>
  
  <entry>
    <title>2020年的目标</title>
    <link href="//caibing.github.io/2020/09/10/my-target-2020/"/>
    <id>//caibing.github.io/2020/09/10/my-target-2020/</id>
    <published>2020-09-10T05:26:00.000Z</published>
    <updated>2020-09-10T05:41:03.000Z</updated>
    
    <content type="html"><![CDATA[<p>完善自己的技术栈：</p><ol><li>docker &amp; k8s</li><li>kafka</li></ol><p>系统架构学习：</p><ol><li>学习掌握php设计模式应用</li></ol><p>业务架构学习：</p><ol><li>设计用户体系</li><li>设计购物车体系</li><li>设计营销体系</li><li>设计交易中心</li></ol><p>待续…</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;完善自己的技术栈：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;docker &amp;amp; k8s&lt;/li&gt;
&lt;li&gt;kafka&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;系统架构学习：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;学习掌握php设计模式应用&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;业务架构学习：&lt;/p&gt;
&lt;ol&gt;
&lt;l
      
    
    </summary>
    
    
      <category term="目标" scheme="//caibing.github.io/tags/%E7%9B%AE%E6%A0%87/"/>
    
      <category term="target" scheme="//caibing.github.io/tags/target/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="//caibing.github.io/2020/09/09/hello-world/"/>
    <id>//caibing.github.io/2020/09/09/hello-world/</id>
    <published>2020-09-09T12:39:00.000Z</published>
    <updated>2020-09-14T06:42:58.298Z</updated>
    
    <content type="html"><![CDATA[<p>在Winiex的推荐和帮助下，这个octopress博客终于搭建起来了。</p><p>折腾了两天多，在github page上看到自己的博客加载下来时，突然有种错综复杂的恍惚感。是的，它不是qq空间，不是新浪博客，不是豆瓣小站，也不是贴吧。它更像是属于自己的一块小小的领地，因而我满足于这种归属感。我愿在上面安静劳作。</p><p>一个农民，通过自身努力终于分到了一块地，不再需要在地主的土地上创造流量价值时，于是翻身作主的他可以宣告说：Hello World。当然这个农民确切来说是个码农。</p><p>感谢Zespia提供的slash主题。我很喜欢这种色调。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在Winiex的推荐和帮助下，这个octopress博客终于搭建起来了。&lt;/p&gt;
&lt;p&gt;折腾了两天多，在github page上看到自己的博客加载下来时，突然有种错综复杂的恍惚感。是的，它不是qq空间，不是新浪博客，不是豆瓣小站，也不是贴吧。它更像是属于自己的一块小小的领地
      
    
    </summary>
    
    
      <category term="杂谈" scheme="//caibing.github.io/tags/%E6%9D%82%E8%B0%88/"/>
    
      <category term="octopress" scheme="//caibing.github.io/tags/octopress/"/>
    
  </entry>
  
</feed>
